// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./../mocks/mock_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/sweetheart0330/metrics-alert/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
	isgomock struct{}
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// SendCounterMetric mocks base method.
func (m_2 *MockIClient) SendCounterMetric(m models.Metrics) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendCounterMetric", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCounterMetric indicates an expected call of SendCounterMetric.
func (mr *MockIClientMockRecorder) SendCounterMetric(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCounterMetric", reflect.TypeOf((*MockIClient)(nil).SendCounterMetric), m)
}

// SendGaugeMetric mocks base method.
func (m_2 *MockIClient) SendGaugeMetric(m models.Metrics) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendGaugeMetric", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendGaugeMetric indicates an expected call of SendGaugeMetric.
func (mr *MockIClientMockRecorder) SendGaugeMetric(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGaugeMetric", reflect.TypeOf((*MockIClient)(nil).SendGaugeMetric), m)
}

// SendMetricsBatch mocks base method.
func (m *MockIClient) SendMetricsBatch(metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricsBatch", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetricsBatch indicates an expected call of SendMetricsBatch.
func (mr *MockIClientMockRecorder) SendMetricsBatch(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricsBatch", reflect.TypeOf((*MockIClient)(nil).SendMetricsBatch), metrics)
}
