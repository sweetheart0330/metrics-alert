// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./../mocks/mock_repo.go
//

// Package mock_repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/sweetheart0330/metrics-alert/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockIRepository) GetAllMetrics() ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics")
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockIRepositoryMockRecorder) GetAllMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockIRepository)(nil).GetAllMetrics))
}

// GetMetric mocks base method.
func (m *MockIRepository) GetMetric(metricID string) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", metricID)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockIRepositoryMockRecorder) GetMetric(metricID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockIRepository)(nil).GetMetric), metricID)
}

// UpdateAllMetrics mocks base method.
func (m *MockIRepository) UpdateAllMetrics(metrics []models.Metrics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAllMetrics", metrics)
}

// UpdateAllMetrics indicates an expected call of UpdateAllMetrics.
func (mr *MockIRepositoryMockRecorder) UpdateAllMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllMetrics", reflect.TypeOf((*MockIRepository)(nil).UpdateAllMetrics), metrics)
}

// UpdateCounterMetric mocks base method.
func (m *MockIRepository) UpdateCounterMetric(metric models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounterMetric", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounterMetric indicates an expected call of UpdateCounterMetric.
func (mr *MockIRepositoryMockRecorder) UpdateCounterMetric(metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounterMetric", reflect.TypeOf((*MockIRepository)(nil).UpdateCounterMetric), metric)
}

// UpdateGaugeMetric mocks base method.
func (m *MockIRepository) UpdateGaugeMetric(metric models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGaugeMetric", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGaugeMetric indicates an expected call of UpdateGaugeMetric.
func (mr *MockIRepositoryMockRecorder) UpdateGaugeMetric(metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGaugeMetric", reflect.TypeOf((*MockIRepository)(nil).UpdateGaugeMetric), metric)
}

// MockFileSaver is a mock of FileSaver interface.
type MockFileSaver struct {
	ctrl     *gomock.Controller
	recorder *MockFileSaverMockRecorder
	isgomock struct{}
}

// MockFileSaverMockRecorder is the mock recorder for MockFileSaver.
type MockFileSaverMockRecorder struct {
	mock *MockFileSaver
}

// NewMockFileSaver creates a new mock instance.
func NewMockFileSaver(ctrl *gomock.Controller) *MockFileSaver {
	mock := &MockFileSaver{ctrl: ctrl}
	mock.recorder = &MockFileSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSaver) EXPECT() *MockFileSaverMockRecorder {
	return m.recorder
}

// UploadMetrics mocks base method.
func (m *MockFileSaver) UploadMetrics() ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadMetrics")
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadMetrics indicates an expected call of UploadMetrics.
func (mr *MockFileSaverMockRecorder) UploadMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadMetrics", reflect.TypeOf((*MockFileSaver)(nil).UploadMetrics))
}

// WriteMetrics mocks base method.
func (m *MockFileSaver) WriteMetrics(metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMetrics", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMetrics indicates an expected call of WriteMetrics.
func (mr *MockFileSaverMockRecorder) WriteMetrics(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetrics", reflect.TypeOf((*MockFileSaver)(nil).WriteMetrics), metrics)
}
